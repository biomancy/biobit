import os
from pathlib import Path
from typing import Iterable

from attrs import define, field

from biobit.core import ngs
from biobit.core.loc import Strand
from biobit.toolkit import seqproj


@define(slots=True, frozen=True, eq=True, order=True, repr=True, hash=True, init=False)
class Experiment:
    descriptor: str = field()
    source: seqproj.Experiment = field()
    # Files generated by the pipeline
    bam: Path = field(converter=lambda x: Path(x))
    bigwig: dict[Strand, Path] = field()
    salmon: Path = field(converter=lambda x: Path(x))

    def __init__(self, descriptor: str, source: seqproj.Experiment, resfolder: os.PathLike[str]):
        # Folder with the results of the pipeline
        resfolder = Path(resfolder)
        # if not resfolder.is_dir():
        #     raise ValueError(f"Results folder {resfolder} does not exist")

        # BAM file
        bam = resfolder / "star_salmon" / f"{descriptor}.markdup.sorted.bam"

        # Bigwig
        if source.library.strandedness in {seqproj.Strandedness.Unstranded, None}:
            raise ValueError(
                f"Unstranded experiments or experiments with unknown strandedness are not supported: {descriptor}"
            )

        bigwig = {
            Strand.Forward: resfolder / "star_salmon" / "bigwig" / f"{descriptor}.forward.bigWig",
            Strand.Reverse: resfolder / "star_salmon" / "bigwig" / f"{descriptor}.reverse.bigWig"
        }

        # Salmon file
        salmon = resfolder / "star_salmon" / descriptor / "quant.sf"

        self.__attrs_init__(descriptor, source, bam, bigwig, salmon)

    def ngs(self) -> ngs.Layout:
        return self.source.ngs()

    @property
    def ind(self) -> str:
        return self.source.ind

    @property
    def library(self) -> seqproj.Library:
        return self.source.library

    @property
    def sample(self) -> seqproj.Sample:
        return self.source.sample

    @property
    def runs(self) -> Iterable[seqproj.Run]:
        return self.source.runs

    @property
    def ensure_exists(self):
        allfiles = [
            self.bam, self.bam.with_suffix(".bam.bai"), self.bigwig[Strand.Forward], self.bigwig[Strand.Reverse],
            self.salmon
        ]
        for run in self.runs:
            match run.layout:
                case seqproj.Layout.Single:
                    allfiles.append(run.layout.file)
                case seqproj.Layout.Paired:
                    allfiles.extend(run.layout.files)

        missing = [f for f in allfiles if not f.exists()]
        if missing:
            report = "\n".join(f"\t{f}" for f in missing)
            raise FileNotFoundError(
                f"nf-core/rnaseq project ({self.source.ind}) is not complete, missing files: {report}"
            )
